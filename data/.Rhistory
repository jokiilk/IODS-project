osastomuokkaus[match(osastomuokkaus$Jas1, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$Jas1 <- with(henkilomuokkaus, ID[match(osastomuokkaus$Jas1, nimi)])
#J2 vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$Jas2, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$Jas2 <- with(henkilomuokkaus, ID[match(osastomuokkaus$Jas2, nimi)])
#J3 vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$Jas3, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$Jas3 <- with(henkilomuokkaus, ID[match(osastomuokkaus$Jas3, nimi)])
#SJ vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$SJ, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$SJ <- with(henkilomuokkaus, ID[match(osastomuokkaus$SJ, nimi)])
#sotilasarvot luokiteltuna
sotilaat <- sotilasarvot
osastomuokkaus[match(osastomuokkaus$Sjarvo, sotilaat$X2), 2, drop=F]
osastomuokkaus$Sjarvo <- with(sotilaat, X1[match(osastomuokkaus$Sjarvo, X2)])
#ammatit jasen 2 ja 3
ammatit <- ammatit23
osastomuokkaus[match(osastomuokkaus$`J2 ammatti`, ammatit$X2), 2, drop=F]
osastomuokkaus$`J2 ammatti` <- with(ammatit, X1[match(osastomuokkaus$`J2 ammatti`, X2)])
osastomuokkaus[match(osastomuokkaus$`J3 ammatti`, ammatit$X2), 2, drop=F]
osastomuokkaus$`J3 ammatti` <- with(ammatit, X1[match(osastomuokkaus$`J3 ammatti`, X2)])
#lainoppineiden jäsenten ammattiluokitus
lakimiehet <- lakiAmmatit
osastomuokkaus[match(osastomuokkaus$`PJ ammatti`, lakimiehet$X2), 2, drop=F]
osastomuokkaus$`PJ ammatti` <- with(lakimiehet, X1[match(osastomuokkaus$`PJ ammatti`, X2)])
osastomuokkaus[match(osastomuokkaus$`J1 ammatti`, lakimiehet$X2), 2, drop=F]
osastomuokkaus$`J1 ammatti` <- with(lakimiehet, X1[match(osastomuokkaus$`J1 ammatti`, X2)])
osastomuokkaus <- osastot
osastomuokkaus #varmistus, ettei alkuperäinen data mene pilalle
henkilomuokkaus <- henkilot
henkilomuokkaus
#tässä yritetään id:n matchausta nimien avulla
osastomuokkaus[match(osastomuokkaus$PJ, henkilomuokkaus$nimi), 2, drop=F]
#head(osastomuokkaus)
#PJ:n vaihto ID-numeroksi
osastomuokkaus$PJ <- with(henkilomuokkaus, ID[match(osastomuokkaus$PJ, nimi)])
#J1 vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$Jas1, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$Jas1 <- with(henkilomuokkaus, ID[match(osastomuokkaus$Jas1, nimi)])
#J2 vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$Jas2, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$Jas2 <- with(henkilomuokkaus, ID[match(osastomuokkaus$Jas2, nimi)])
#J3 vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$Jas3, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$Jas3 <- with(henkilomuokkaus, ID[match(osastomuokkaus$Jas3, nimi)])
#SJ vaihto ID-numeroksi
osastomuokkaus[match(osastomuokkaus$SJ, henkilomuokkaus$nimi), 2, drop=F]
osastomuokkaus$SJ <- with(henkilomuokkaus, ID[match(osastomuokkaus$SJ, nimi)])
#sotilasarvot luokiteltuna
sotilaat <- sotilasarvot
osastomuokkaus[match(osastomuokkaus$Sjarvo, sotilaat$X2), 2, drop=F]
osastomuokkaus$Sjarvo <- with(sotilaat, X1[match(osastomuokkaus$Sjarvo, X2)])
#ammatit jasen 2 ja 3
ammatit <- ammatit23
osastomuokkaus[match(osastomuokkaus$`J2 ammatti`, ammatit$X2), 2, drop=F]
osastomuokkaus$`J2 ammatti` <- with(ammatit, X1[match(osastomuokkaus$`J2 ammatti`, X2)])
osastomuokkaus[match(osastomuokkaus$`J3 ammatti`, ammatit$X2), 2, drop=F]
osastomuokkaus$`J3 ammatti` <- with(ammatit, X1[match(osastomuokkaus$`J3 ammatti`, X2)])
#lainoppineiden jäsenten ammattiluokitus
lakimiehet <- lakiAmmatit
osastomuokkaus[match(osastomuokkaus$`PJ ammatti`, lakimiehet$X2), 2, drop=F]
osastomuokkaus$`PJ ammatti` <- with(lakimiehet, X1[match(osastomuokkaus$`PJ ammatti`, X2)])
osastomuokkaus[match(osastomuokkaus$`J1 ammatti`, lakimiehet$X2), 2, drop=F]
osastomuokkaus$`J1 ammatti` <- with(lakimiehet, X1[match(osastomuokkaus$`J1 ammatti`, X2)])
library(foreign)
write.dta(osastomuokkaus, "valtiorikosoikeudet.dta")
write.table(osastomuokkaus, "c:/vro_koodattu.txt", sep="\t")
write.table(osastomuokkaus, "vro_koodattu.txt", sep="\t")
library(readxl)
tuomiot <- read_excel("~/Valtiorikosoikeudet/tuomiot.xls")
View(tuomiot)
library(readxl)
valkoiset_yhdiste_9_12_2016 <- read_excel("~/Ilkka/Tutkimusprojeksti/valkoiset väliyhdistelm/valkoiset_yhdiste_9-12-2016.xls")
View(valkoiset_yhdiste_9_12_2016)
warning()
warnings()
warnings(valkoiset_yhdiste_9_12_2016)
help("summary")
ammatti1918 = summary(ammatti 1918)
valkoiset <- valkoiset_yhdiste_9_12_2016
valkoiset
View(kotipaikat)
View(valkoiset)
valkoisetAmmatti1918 <- summary(valkoiset$`ammatti 1918`)
summary(valkoiset$`ammatti 1918`)
summary(Valkoiset$s-vuosi)
summary(valkoiset$`s-vuosi`)
aggregate(valkoiset)
library(plyr)
count(valkoiset$`ammatti 1918`)
ammatit1918 <- count(valkoiset$`ammatti 1918`)
View(ammatit1918)
View(ammatit1918)
ammattiNyk <- vount(valkoiset$`ammatti nyk`)
ammattiNyk <- count(valkoiset$`ammatti nyk`)
View(ammattiNyk)
View(ammattiNyk)
ammatti <- merge(data ammatit1918,data ammattiNyk,by="x")
ammatti <- merge(data ammatit1918,data ammattiNyk,by="x")
tyo <- merge(data ammatit1918,data ammattiNyk,by="x")
tyo <- merge(ammatit1918,ammattiNyk,by="x")
View(tyo)
View(tyo)
ammatti <- merge(ammatit1918,ammattiNyk,by="all.x")
ammatti <- merge(ammatit1918,ammattiNyk,all.x="x")
ammatti <- merge(ammatit1918,ammattiNyk,all.x="TRUE")
View(ammatti)
View(ammatti)
ammatti <- merge(ammatit1918,ammattiNyk,all.x="FALSE")
ammatti <- merge(ammatit1918,ammattiNyk,all.y="TRUE")
ammatti <- merge(ammatit1918,ammattiNyk,all="TRUE")
ammatti <- merge(ammatit1918,ammattiNyk,all=L)
ammatti <- merge(ammatit1918,ammattiNyk,all="L")
syntyma <- count(valkoiset$`s-vuosi`)
viem(syntyma)
View(syntyma)
sum(syntyma$freq)
summary(syntyma)
write.table(syntyma, "syntyma.txt", sep="\t")
write.table(ammatit1918, "ammatti1918.txt", sep="\t")
write.table(ammattiNyk, "ammattiNyk.txt", sep="\t")
ftable(ammatit1918)
osuudet <- ftable(ammatit1918)
view(osuudet)
osuudet
sum(syntyma$freq)
summary(syntyma)
?drop
synt <- subset()
newdata <- subset(syntyma, x >= 1916 | x < 1000, select=c(freq))
view(newdata)
View(newdata)
View(newdata)
newdata <- subset(syntyma, x >= 1000 | x < 1916, select=c(freq))
View(newdata)
View(newdata)
newdata <- subset(syntyma, x >= 1000 | x < 1916, select=c(x,freq))
View(newdata)
View(newdata)
newdata <- subset(syntyma, x >= 1000 | x < 1916, select=c(x))
View(newdata)
View(newdata)
newdata <- subset(syntyma, x >= 1000 | x < 1916
newdata <- subset(syntyma, x >= 1000 | x < 1916
newdata <- subset(syntyma, x >= 1000 | x < 1916)
View(newdata)
View(newdata)
library(readxl)
syntyma <- read_excel("~/syntyma.xls", col_names = FALSE,
col_types = c("numeric", "numeric"))
View(syntyma)
summary(syntyma)
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
install.packages(c("abind", "acepack", "car", "colorspace", "digest", "geosphere", "ggmap", "ggplot2", "gridExtra", "gtable", "Hmisc", "latticeExtra", "lme4", "mapdata", "maps", "MareyMap", "munsell", "plyr", "proto", "quantreg", "Rcmdr", "RcmdrMisc", "Rcpp", "RcppEigen", "readxl", "reshape2", "RgoogleMaps", "scales", "sp", "SparseM", "stringi", "stringr"))
learn <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", sep="\t", header=TRUE)
dim(learn)
View(learn)
str(learn)
library(dplyr)
head(learn)
install.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
R.version
d1=read.table("student-mat.csv",sep=";",header=TRUE)
setwd("~/Ilkka/IODS-project/data")
print(nrow(d3)) # 382 students
d1=read.table("student-mat.csv",sep=";",header=TRUE)
d2=read.table("student-por.csv",sep=";",header=TRUE)
d3=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
?nrow
mat <- read.csv("student-mat.csv", sep = ";", header = TRUE)
por <- read.csv("student-por.csv", sep = ";", header = TRUE)
str(por) %>% summary
library(dplyr)
str(por) %>% summary
str(mat)
summary(por)
library(dplyr)
mat <- read.csv("student-mat.csv", sep = ";", header = TRUE)
por <- read.csv("student-por.csv", sep = ";", header = TRUE)
str(por) %>% summary()
head(por)
str(por)
summary(por)
head(mat)
str(mat)
summary(mat)
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
mat$Fjob
inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
head(mat_por)
head(alc)
alc <- select(mat_por, one_of(join_by))
head(alc)
tausta <- select(mat_por, one_of(join_by))
head(tausta)
summaru(tausta)
summary(tausta)
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
notjoined_columns
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
tausta[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
tausta[column_name] <- first_column
}
}
two_columns
testi <- select(two_columns, 2)[[1]]
testi
two_columns[1]
testi <- select(two_columns, 2)[[0]]
testi <- select(two_columns, 2)[[1]]
testi
testi <- select(two_columns, 2)
testi
testi <- select(two_columns, 1)
testi
testi <- select(two_columns, 1)[[2]]
testi <- select(two_columns, 1)[[1]]
testi
glimpse(tausta)
glimpse(tausta)
glimpse(alkoholi)
# glimpse at the new combined data
glimpse(alkoholi)
# Ilkka Jokipii, 9.2.2017., Student alcohol consumption data exercise
library(dplyr)
mat <- read.csv("student-mat.csv", sep = ";", header = TRUE)
por <- read.csv("student-por.csv", sep = ";", header = TRUE)
head(por)
str(por)
summary(por)
head(mat)
str(mat)
summary(mat)
#joining data sets
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
head(mat_por)
alkoholi <- select(mat_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alkoholi[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alkoholi[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alkoholi)
glimpse(alkoholi)
mutate()
alkoholi <- mutate(alkoholi, alc_use = mean(Dalc + Walc))
alkoholi$alc_use
glimpse(alkoholi)
alkoholi <- mutate(alkoholi, alc_use = (Dalc + Walc) / 2)
alkoholi$alc_use
glimpse(alkoholi)
alkoholi <- mutate(alkoholi, high_use = alc_use > 2)
glimpse(alkoholi)
# Ilkka Jokipii, 9.2.2017., Student alcohol consumption data exercise
library(dplyr)
mat <- read.csv("student-mat.csv", sep = ";", header = TRUE)
por <- read.csv("student-por.csv", sep = ";", header = TRUE)
head(por)
str(por)
summary(por)
head(mat)
str(mat)
summary(mat)
#joining data sets
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
head(mat_por)
alkoholi <- select(mat_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alkoholi[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alkoholi[column_name] <- first_column
}
}
# creating new columns to the data set
alkoholi <- mutate(alkoholi, alc_use = (Dalc + Walc) / 2)
alkoholi$alc_use
glimpse(alkoholi)
alkoholi <- mutate(alkoholi, high_use = alc_use > 2)
glimpse(alkoholi)
#saving data
write.csv(alkoholi, file= "alkoholi.csv")
# Ilkka Jokipii, 9.2.2017., Student alcohol consumption data exercise
library(dplyr)
mat <- read.csv("student-mat.csv", sep = ";", header = TRUE)
por <- read.csv("student-por.csv", sep = ";", header = TRUE)
head(por)
str(por)
summary(por)
head(mat)
str(mat)
summary(mat)
#joining data sets
join_by <- c("school", "sex", "age", "address", "famsize", "Pstatus", "Medu", "Fedu", "Mjob", "Fjob", "reason", "nursery","internet")
mat_por <- inner_join(mat, por, by = join_by, suffix = c(".mat", ".por"))
head(mat_por)
alc <- select(mat_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(mat)[!colnames(mat) %in% join_by]
# print out the columns not used for joining
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(mat_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# creating new columns to the data set
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc$alc_use
glimpse(alc)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
#saving data
write.csv(alc, file= "alc.csv")
knitr::opts_chunk$set(echo = TRUE)
alc <- read.table("data/alc.csv", sep = ",", header = TRUE)
alc
alc$X <- NULL
alc$X <- NULL
alc
library(dplyr)
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
m <- glm(high_use ~ failures + absences + sex, data = alc, family = "binomial")
m
head(alc)
str(alc)
summary(alc)
alc$sex
m <- glm(high_use ~ Pstatus + famrel + sex, data = alc, family = "binomial")
m
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
family <- ggplot(data = alc, mapping = aes(x = alc_use, y = famrel, col = sex))
family
family + ggplot()
family
family <- ggplot(data = alc, mapping = aes(x = alc_use, y = famrel, col = sex))
graph <- family + geom_boxplot()
graph
graph <- family + geom_point()
graph
family <- ggplot(data = alc, mapping = aes(x = alc_use, y = famrel, col = sex))
graph <- family + geom_point()
graph
graph <- family + geom_dotplot()
graph
graph <- family + geom_dotplot()
graph
graph <- family + geom_bar()
graph
graph
graph <- family + geom_area()
graph
family <- ggplot(data = alc, mapping = aes(x = alc_use, y = famrel, col = sex))
graph <- family + geom_point() + geom_smooth(method = "lm")
graph
family <- ggplot(data = alc, mapping = aes(x = high_use, y = famrel, col = sex))
graph <- family + geom_point() + geom_smooth(method = "lm")
graph
graph <- family + geom_boxplot()
graph
family <- ggplot(data = alc, mapping = aes(x = high_use, y = famrel, col = sex))
graph <- family + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
graph
family <- ggplot(data = alc, mapping = aes(x = high_use, y = famrel))
graph <- family + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
graph
divorce <- ggplot(data = alc, mapping = aes(x = high_use, y = Pstatus))
divorcegraph <- divorce + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
divorcegraph
divorce <- ggplot(data = alc, mapping = aes(x = high_use, y = Pstatus))
divorcegraph <- divorce + geom_bar() + ggtitle("Family relations and high use of alcohol")
divorcegraph
divorce <- ggplot(data = alc, mapping = aes(x = high_use, y = Pstatus))
divorcegraph <- divorce + geom_point() + ggtitle("Family relations and high use of alcohol")
divorcegraph
divorce <- ggplot(data = alc, mapping = aes(x = high_use, y = Pstatus))
divorcegraph <- divorce + geom_col() + ggtitle("Family relations and high use of alcohol")
divorcegraph
divorce <- ggplot(data = alc, mapping = aes(x = high_use, y = Pstatus))
divorcegraph <- divorce + geom_count() + ggtitle("Family relations and high use of alcohol")
divorcegraph
family <- ggplot(data = alc, mapping = aes(x = high_use, y = famrel))
graph <- family + geom_count() + ggtitle("Family relations and high use of alcohol")
graph
family <- ggplot(data = alc, mapping = aes(x = alc_use, y = famrel))
graph <- family + geom_count() + ggtitle("Family relations and high use of alcohol")
graph
family <- ggplot(data = alc, mapping = aes(x = alc_use, y = famrel))
graph <- family + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
graph
family <- ggplot(data = alc, mapping = aes(x = high_use, y = famrel))
graph <- family + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
graph
x <- plot(alc$high_use, alc$Pstatus)
x
x <- plot(alc$high_use, alc$Pstatus)
x2 <- x + geom_area()
x <- plot(alc$high_use, alc$Pstatus)
x
table <- table(Pstatus = alc$Pstatus, high_use = alc$high_use)
table
HomeVsUse <- table(Pstatus = alc$Pstatus, high_use = alc$high_use)
HomeVsUse
prop.table(HomeVsUse, 1) %>% addmargins()
prop.table(HomeVsUse, 1) %>% addmargins()
HomeVsUse <- table(Pstatus = alc$Pstatus, high_use = alc$high_use)
HomeVsUse
home <- ggplot(data=alc, x=Pstatus, y=alc_use, col=sex)
home2 <- home + geom_boxplot()
home2
family <- ggplot(data = alc, mapping = aes(x = high_use, y = famrel))
graph <- family + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
graph
home <- ggplot(data=alc, mapping = aes(x=Pstatus, y=alc_use, col=sex))
home <- ggplot(data=alc, mapping = aes(x=Pstatus, y=alc_use, col=sex))
home2 <- home + geom_boxplot()
home2
g1 <- ggplot(data = alc, mapping = aes(x = high_use, y = sex))
g2 <- sexAndAlcohol + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
g1 <- ggplot(data = alc, mapping = aes(x = high_use, y = sex))
g2 <- g1 + geom_boxplot() + ggtitle("Family relations and high use of alcohol")
g2
tab <- table(sex = alc$sex, high_use = alc$high_use)
tab
g1 <- ggplot(data=alc, mapping=aes(x=sex, y=alc_use))
g2 <- g1 + geom_boxplot()
g2
tab <- table(sex = alc$sex, high_use = alc$high_use)
tab
tab <- table(sex = alc$sex, high_use = alc$high_use)
tab
tab2 <- prop.table(tab, 1) %>% addmargins()
tab2
tab <- table(sex = alc$sex, high_use = alc$high_use)
tab
tab2 <- prop.table(tab, 1) %>% addmargins()
tab2
tab <- table(sex = alc$sex, alc_use = alc$high_use)
tab
tab2 <- prop.table(tab, 1) %>% addmargins()
tab2
tab <- table(sex = alc$sex, high_use = alc$high_use)
tab
tab2 <- prop.table(tab, 1) %>% addmargins()
tab2
g1 <- ggplot(data=alc, mapping=aes(x=sex, y=alc_use))
g2 <- g1 + geom_boxplot()
g2
